// <auto-generated />
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20240319095650_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.Drink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Drinks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Legfinomabb kávéból, igazi olaszos preszzó.",
                            Name = "Espresso",
                            Price = 700,
                            Type = "coffee"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Minőségi Ginből, minőségű Tonicból",
                            Name = "Gin Tonic",
                            Price = 1300,
                            Type = "alchoholic"
                        });
                });

            modelBuilder.Entity("Domain.Models.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("Bytes")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MealId")
                        .HasColumnType("int");

                    b.Property<decimal>("Size")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("MealId")
                        .IsUnique();

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Domain.Models.Meal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Meals");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Bundás Kenyér bundából és kenyérből van",
                            Name = "Bundás Kenyér",
                            Price = 2000
                        },
                        new
                        {
                            Id = 2,
                            Description = "Omlett 3 tojásból készül és nagyon fincsa",
                            Name = "Omlett",
                            Price = 1800
                        },
                        new
                        {
                            Id = 3,
                            Description = "Tükörtojás 3 tojásból készül és nagyon fincsa",
                            Name = "Tükörtojás",
                            Price = 1800
                        },
                        new
                        {
                            Id = 4,
                            Description = "Ez az étel, jó, de nem mindenki szereti",
                            Name = "Sült Oldalas",
                            Price = 2800
                        },
                        new
                        {
                            Id = 5,
                            Description = "Sima szendvics... semmi extra, kenyér, vaj, cuccok",
                            Name = "Szendvics",
                            Price = 1200
                        },
                        new
                        {
                            Id = 6,
                            Description = "Legjobb házi krumpliból, friss olajban sülve",
                            Name = "Sültkrumpli",
                            Price = 1000
                        },
                        new
                        {
                            Id = 7,
                            Description = "Frissen készült humusz, zöldségekkel",
                            Name = "Humusz tál",
                            Price = 1200
                        },
                        new
                        {
                            Id = 8,
                            Description = "Olasz módra készült, legfinomabb tésztaétel",
                            Name = "Bolognai Spagetti",
                            Price = 2900
                        },
                        new
                        {
                            Id = 9,
                            Description = "Frissen vágott zöldségekből, uborka, paaradicsom, saláta, és egy kis szeretet",
                            Name = "Saláta",
                            Price = 1000
                        });
                });

            modelBuilder.Entity("Domain.Models.MealRestriction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MealId")
                        .HasColumnType("int");

                    b.Property<int>("RestrictionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MealId");

                    b.HasIndex("RestrictionId");

                    b.ToTable("MealRestrictions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MealId = 1,
                            RestrictionId = 2
                        },
                        new
                        {
                            Id = 2,
                            MealId = 1,
                            RestrictionId = 3
                        },
                        new
                        {
                            Id = 3,
                            MealId = 2,
                            RestrictionId = 2
                        },
                        new
                        {
                            Id = 4,
                            MealId = 3,
                            RestrictionId = 1
                        },
                        new
                        {
                            Id = 5,
                            MealId = 3,
                            RestrictionId = 2
                        },
                        new
                        {
                            Id = 6,
                            MealId = 4,
                            RestrictionId = 1
                        },
                        new
                        {
                            Id = 7,
                            MealId = 4,
                            RestrictionId = 3
                        },
                        new
                        {
                            Id = 8,
                            MealId = 5,
                            RestrictionId = 2
                        },
                        new
                        {
                            Id = 9,
                            MealId = 6,
                            RestrictionId = 1
                        },
                        new
                        {
                            Id = 10,
                            MealId = 6,
                            RestrictionId = 2
                        },
                        new
                        {
                            Id = 11,
                            MealId = 6,
                            RestrictionId = 3
                        },
                        new
                        {
                            Id = 12,
                            MealId = 6,
                            RestrictionId = 4
                        },
                        new
                        {
                            Id = 13,
                            MealId = 7,
                            RestrictionId = 1
                        },
                        new
                        {
                            Id = 14,
                            MealId = 7,
                            RestrictionId = 2
                        },
                        new
                        {
                            Id = 15,
                            MealId = 7,
                            RestrictionId = 3
                        },
                        new
                        {
                            Id = 16,
                            MealId = 7,
                            RestrictionId = 4
                        },
                        new
                        {
                            Id = 17,
                            MealId = 9,
                            RestrictionId = 1
                        },
                        new
                        {
                            Id = 18,
                            MealId = 9,
                            RestrictionId = 2
                        },
                        new
                        {
                            Id = 19,
                            MealId = 9,
                            RestrictionId = 3
                        },
                        new
                        {
                            Id = 20,
                            MealId = 9,
                            RestrictionId = 4
                        });
                });

            modelBuilder.Entity("Domain.Models.Pizza", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Pizzas");
                });

            modelBuilder.Entity("Domain.Models.Restriction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Restrictions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Gluténmentes"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Vegetáriánus"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Laktózmentes"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Vegán"
                        });
                });

            modelBuilder.Entity("Domain.Models.Topping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Topping");
                });

            modelBuilder.Entity("PizzaTopping", b =>
                {
                    b.Property<int>("PizzasId")
                        .HasColumnType("int");

                    b.Property<int>("ToppingsId")
                        .HasColumnType("int");

                    b.HasKey("PizzasId", "ToppingsId");

                    b.HasIndex("ToppingsId");

                    b.ToTable("PizzaTopping");
                });

            modelBuilder.Entity("RestrictionTopping", b =>
                {
                    b.Property<int>("RestrictionsId")
                        .HasColumnType("int");

                    b.Property<int>("ToppingsId")
                        .HasColumnType("int");

                    b.HasKey("RestrictionsId", "ToppingsId");

                    b.HasIndex("ToppingsId");

                    b.ToTable("RestrictionTopping");
                });

            modelBuilder.Entity("Domain.Models.Image", b =>
                {
                    b.HasOne("Domain.Models.Meal", "Meal")
                        .WithOne("Image")
                        .HasForeignKey("Domain.Models.Image", "MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meal");
                });

            modelBuilder.Entity("Domain.Models.MealRestriction", b =>
                {
                    b.HasOne("Domain.Models.Meal", "Meal")
                        .WithMany()
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Restriction", "Restriction")
                        .WithMany()
                        .HasForeignKey("RestrictionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meal");

                    b.Navigation("Restriction");
                });

            modelBuilder.Entity("PizzaTopping", b =>
                {
                    b.HasOne("Domain.Models.Pizza", null)
                        .WithMany()
                        .HasForeignKey("PizzasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Topping", null)
                        .WithMany()
                        .HasForeignKey("ToppingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RestrictionTopping", b =>
                {
                    b.HasOne("Domain.Models.Restriction", null)
                        .WithMany()
                        .HasForeignKey("RestrictionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Topping", null)
                        .WithMany()
                        .HasForeignKey("ToppingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Meal", b =>
                {
                    b.Navigation("Image")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
